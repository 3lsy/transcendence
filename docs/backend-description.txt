Backend : typescript, fastify, nodejs
Microservices :
- services:

  # Backend Microservices

  api-gateway:
    image: nginx:1.29
    container_name: api-gateway
    hostname: api-gateway
    restart: unless-stopped
    networks:
      - transcendence-network
    # ports:
      # - "8880:80" # HTTP Redirect
      # - "8443:443" # HTTPS
    volumes:
      - ./services/website/backend/api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/website/backend/api-gateway/api-gateway.crt:/etc/nginx/ssl/api-gateway.crt:ro
      - ./services/website/backend/api-gateway/api-gateway.key:/etc/nginx/ssl/api-gateway.key:ro
    depends_on:
      - game-service
      - scoreboard-service
      - tournament-service

  game-service:
    build: ./services/website/backend/game-service
    image: game-service-tc
    container_name: game-service
    hostname: game-service
    restart: unless-stopped
    networks:
      - transcendence-network
    ports:
      - "3601:3601"  # Game service API

  scoreboard-service:
    build: ./services/website/backend/scoreboard-service
    image: scoreboard-service-tc
    container_name: scoreboard-service
    hostname: scoreboard-service
    restart: unless-stopped
    networks:
      - transcendence-network
    ports:
      - "3602:3602"  # Scoreboard service API

  tournament-service:
    build: ./services/website/backend/tournament-service
    image: tournament-service-tc
    container_name: tournament-service
    hostname: tournament-service
    restart: unless-stopped
    networks:
      - transcendence-network
    ports:
      - "3603:3603"  # Tournament service API


Basic Pong with Server-Side Pong and Implementing an
API.
In this major module, the goal is to replace the basic Pong game with a server-
side Pong game, accompanied by the implementation of an API. Key features and
objectives include:
◦ Develop server-side logic for the Pong game to handle gameplay, ball move-
ment, scoring, and player interactions.
◦ Create an API that exposes the necessary resources and endpoints to interact
with the Pong game, allowing partial usage of the game via the Command-Line
Interface (CLI) and web interface.
◦ Design and implement the API endpoints to support game initialization, player
controls, and game state updates.
◦ Ensure that the server-side Pong game is responsive, providing an engaging
and enjoyable gaming experience.
◦ Integrate the server-side Pong game with the web application, allowing users
to play the game directly on the website.
This major module aims to elevate the Pong game by migrating it to the server
side, enabling interaction through both a web interface and CLI while offering an
API for easy access to game resources and features

The designated database for all DB instances in your project is SQLite


Users must be able to participate in a live Pong game against another player directly
on the website. Both players will use the same keyboard

A player must be able to play against another, and a tournament system should
also be available. This tournament will consist of multiple players who can take
turns playing against each other.

A registration system is required: at the start of a tournament, each player must
input their alias. The aliases will be reset when a new tournament begins.

Note: This does not imply user account creation. Users simply enter an alias manually, like an old arcade game.

There must be a matchmaking system: the tournament system should organize
the matchmaking of the participants, and announce the next match.

All players must adhere to the same rules, including having identical paddle speed.


