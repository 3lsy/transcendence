worker_processes auto;
events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;

    # map to handle Connection header for websocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    upstream game_service {
        server game-service:3601;
    }
    upstream scoreboard_service {
        server scoreboard-service:3602;
    }
    upstream tournament_service {
        server tournament-service:3603;
    }

    server {
        listen 80;
        server_name _;
        # redirect all HTTP -> HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name api-gateway;

        ssl_certificate /etc/nginx/ssl/api-gateway.crt;
        ssl_certificate_key /etc/nginx/ssl/api-gateway.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # common proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;

        # default timeouts & websocket conveniences
        proxy_connect_timeout       10s;
        proxy_send_timeout          60s;
        proxy_read_timeout          60s;
        proxy_buffering             off;   # useful for WS and realtime

        # If someone hits /game (no trailing slash) redirect to /game/
        location = /game {
            return 301 /game/;
        }
        location /game/ {
            proxy_pass http://game_service/;  # trailing slash strips /game
            proxy_http_version 1.1;

            # websocket upgrade
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # avoid caching for websocket / realtime endpoints
            proxy_cache_bypass $http_upgrade;
        }

        location = /scoreboard {
            return 301 /scoreboard/;
        }
        location /scoreboard/ {
            proxy_pass http://scoreboard_service/;  # trailing slash strips /scoreboard
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location = /tournament {
            return 301 /tournament/;
        }
        location /tournament/ {
            proxy_pass http://tournament_service/;  # trailing slash strips /tournament
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # fallback
        location / {
            return 404;
        }
    }
}
